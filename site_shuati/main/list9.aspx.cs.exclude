using AgileFrame.Core;
using AgileFrame.Orm.PersistenceLayer.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class wap_main_type : BasePageShuati
{
    protected string subKcName = "";
    protected string agent = "";
    protected string sc = "194oj";
    public string title1 = "未加载";
    public string kemuName = "mks";
    public string kemuId = "mks";
    public string num = "0";
    public string num0 = "0";
    public string num1 = "0";
    public string num2 = "0";
    public string num3 = "0";
    protected string name1 = "";
    protected AFDictionary<string, St_TTimuDaXue> dic = new AFDictionary<string, St_TTimuDaXue>();
    protected AFDictionary<string, St_TTimuDaXue> dic1 = new AFDictionary<string, St_TTimuDaXue>();
    protected AFDictionary<string, St_TTimuDaXue> dic2 = new AFDictionary<string, St_TTimuDaXue>();
    protected AFDictionary<string, St_TTimuDaXue> dic3 = new AFDictionary<string, St_TTimuDaXue>();
    protected AFDictionary<string, St_TTimuDaXue> dic4 = new AFDictionary<string, St_TTimuDaXue>();

    private void setTitle()
    {
        if (!AgileFrame.Core.ConsoleService.IsNeedWebConsole)
        {
            AgileFrame.Core.ConsoleService.IsNeedWebConsole = true;
            AgileFrame.Core.ConsoleService.Fatal("bs控制台启动");
        }

        if (!string.IsNullOrEmpty(Request["sc"]))
        {
            sc = StringHelper.GetNumeric(Convert.ToString(Request["sc"]));
        }
        name1 = BLL1.getDaxueName(sc);

        if (!string.IsNullOrEmpty(Request["kemuName"]))
        {
            kemuName = Request["kemuName"].ToString();
        }
        if (!string.IsNullOrEmpty(Request["kemuId"]))
        {
            kemuId = Request["kemuId"].ToString();
        }
        title1 = BLL3.getClassZhongWen(Request["kemuName"].ToString());

        dic = BLL1.Init(sc, kemuName);
        num = dic.Count.ToString();

        if (dic.Count == 0)
        {
            dic = BLL1.Init("194oj", kemuId);
            num = dic.Count.ToString();
        }

        dic1 = BLL1.Init(sc, kemuName);
        num0 = BLL1.GetSum(sc, kemuName, 0).ToString();

        num1 = BLL1.GetSum(sc, kemuName, 1).ToString();

        num2 = BLL1.GetSum(sc, kemuName, 2).ToString();

        num3 = BLL1.GetSum(sc, kemuName, 3).ToString();

        string sc1 = "194oj";
        if (num0 == "0" && sc != "194oj")
        {
            num0 = BLL1.GetSum(sc1, kemuName, 0).ToString();
        }
        if (num1 == "0" && sc != "194oj")
        {
            num1 = BLL1.GetSum(sc1, kemuName, 1).ToString();
        }
        if (num2 == "0" && sc != "194oj")
        {
            num2 = BLL1.GetSum(sc1, kemuName, 2).ToString();
        }
        if (num3 == "0" && sc != "194oj")
        {
            num3 = BLL1.GetSum(sc1, kemuName, 3).ToString();
        }
    }
    protected string getTingXingName(St_TTimuDaXue t1)
    {
        if(t1.OptionType=="0")
        {
            return "单选";
        }
        if (t1.OptionType == "1")
        {
            return "多选";
        }
        if (t1.OptionType == "2")
        {
            return "判断";
        }
        if (t1.OptionType == "3")
        {
            return "论述";
        }
        return "";
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        setTitle();

        #region 截取非微信访问用户
        //agent = Request.Headers["User-Agent"];
        //if (!choose_net(agent) && !AgileFrame.Core.MyDebugger.IsAttached)// && !AgileFrame.Core.MyDebugger.IsAttached
        //{ string ip1 = GetClientIp();
        //    if (ip1 != "183.245.77.248" && ip1 != "115.159.84.169")
        //    {
        //        Response.Write("您未在微信中打开刷题宝典哦：" + GetClientIp());
        //        Response.End();
        //        return;
        //    }
        //}
    }
    //对用户访问进行判断 如果是的话返回true，否则返回false  
    public bool choose_net(string userAgent)
    {
        if (userAgent.IndexOf("MicroMessenger") > -1)// Nokia phones and emulators   
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    /// <summary>  
    /// 获取客户端Ip  
    /// </summary>  
    /// <returns></returns>  
    public String GetClientIp()
    {
        String clientIP = "";
        if (System.Web.HttpContext.Current != null)
        {
            clientIP = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if (string.IsNullOrEmpty(clientIP) || (clientIP.ToLower() == "unknown"))
            {
                clientIP = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_REAL_IP"];
                if (string.IsNullOrEmpty(clientIP))
                {
                    clientIP = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                }
            }
            else
            {
                clientIP = clientIP.Split(',')[0];
            }
        }
        return clientIP;
    }
    /// <summary>  
    /// 服务器端获取客户端请求IP和客户端机器名称  
    /// </summary>  
    public static string GetClientInfo()
    {
        OperationContext context = OperationContext.Current;
        MessageProperties messageProperties = context.IncomingMessageProperties;
        RemoteEndpointMessageProperty endpointProperty = messageProperties[RemoteEndpointMessageProperty.Name] as RemoteEndpointMessageProperty;
        HttpRequestMessageProperty requestProperty = messageProperties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
        string clientIp = !string.IsNullOrEmpty(requestProperty.Headers["X-Real-IP"]) ? requestProperty.Headers["X-Real-IP"] : endpointProperty.Address;
        string clientName = Environment.MachineName;
        //Console.WriteLine("ClientIp: " + clientIp + "clientName:" + clientName);
        return "ClientIp: " + clientIp + "clientName:" + clientName;
    }
        #endregion 截取非微信访问用户
}