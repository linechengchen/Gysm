using AgileFrame.Core;
using AgileFrame.Orm.PersistenceLayer.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class wap_main_do : BasePageShuati
{
    protected string agent = "";
    protected string sc = "194oj";
    protected string sc2 = "194oj";
    public string title1 = "未加载";
    public string kemuId = "mks";
    public string kemuName = "mks";
    public string num = "1";
    public string type = "sequence";
    public string leimu = "";
    protected string name1 = "";
    protected string tu2wei = "";//zlg
    public string subKcName = "";
    public string jump_num = "";
    public string neice = "";

    private void setTitle()
    {
        if (!string.IsNullOrEmpty(Request["neice"]))
        {
            neice = Request["neice"].ToString();
        }
        if (!string.IsNullOrEmpty(Request["jump_num"]))
        {
            jump_num = Request["jump_num"].ToString();
        }
        //if (!AgileFrame.Core.ConsoleService.IsNeedWebConsole)
        //{
        //    AgileFrame.Core.ConsoleService.IsNeedWebConsole = true;
        //    AgileFrame.Core.ConsoleService.Fatal("bs控制台启动");
        //}
        if (!string.IsNullOrEmpty(Request["leimu"]))
        {
            leimu = Convert.ToString(Request["leimu"]);
        }
        if (!string.IsNullOrEmpty(Request["sc"]))
        {
            sc = StringHelper.GetNumeric(Convert.ToString(Request["sc"]));
        }
        name1 = StringHelper.GetHanZi(BLL1.getDaxueName(sc));

        if (!string.IsNullOrEmpty(Request["type"]))
        {
            type = Request["type"].ToString();
        }
        if (!string.IsNullOrEmpty(Request["kemuId"]))
        {
            kemuId = Request["kemuId"].ToString();
        }
        if (!string.IsNullOrEmpty(Request["kemuName"]))
        {
            kemuName = Request["kemuName"].ToString();
        }
        if (!string.IsNullOrEmpty(Request["subKcName"]))
        {
            subKcName = Request["subKcName"].ToString();
        }
        title1 = kemuName;// BLL3.getClassZhongWen(Request["kemuId"].ToString());

        AFDictionary<string, St_TTimuDaXue> dic1 = BLL1.GetDic(sc, kemuId, leimu);
        
        sc2 = sc;
        num = dic1.Count.ToString();
        if (num == "0")
        {
            sc2 = "194oj";
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        setTitle();
        tu2wei = BLL1.getFile(sc);

        #region 截取非微信访问用户
        agent = Request.Headers["User-Agent"];
        if ( string.IsNullOrEmpty(Request["neice"]) && !choose_net(agent) && !AgileFrame.Core.MyDebugger.IsAttached)// && !AgileFrame.Core.MyDebugger.IsAttached
        {
            string ip1 = GetClientIp();
            if (!"183.245.77.242|183.245.77.245|183.245.77.248|115.159.84.169|stbd.aibangxs.com|115.159.84.169|::1|127.0.0.1|".Contains(ip1) && !ip1.StartsWith("10.30.103"))
            {
                ResponseWarn(tu2wei, ip1);
                return;
            }
        }
    }
    public void ResponseWarn(string tu2wei, string ip1)
    {
        string s1 = ("<br><br><br><br><span style='font-size:25px'>刷题宝典 服务器升级，新地址见码：</span><br><img style='height:300px' src='image/分享/完整版本_num/" + tu2wei + "'/>：" + ip1 + "<br><br><br>");
        BasePage b1 = new BasePage();
        string sinfo = b1.getClientInfo(this.Request, this.Response);
        Response.Write(s1 + sinfo);
        Response.End();
    }
    //对用户访问进行判断 如果是的话返回true，否则返回false  
    public bool choose_net(string userAgent)
    {
        if (userAgent.IndexOf("MicroMessenger") > -1)// Nokia phones and emulators   
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    /// <summary>  
    /// 获取客户端Ip  
    /// </summary>  
    /// <returns></returns>  
    public String GetClientIp()
    {
        String clientIP = "";
        if (System.Web.HttpContext.Current != null)
        {
            clientIP = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if (string.IsNullOrEmpty(clientIP) || (clientIP.ToLower() == "unknown"))
            {
                clientIP = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_REAL_IP"];
                if (string.IsNullOrEmpty(clientIP))
                {
                    clientIP = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
                }
            }
            else
            {
                clientIP = clientIP.Split(',')[0];
            }
        }
        return clientIP;
    }
    /// <summary>  
    /// 服务器端获取客户端请求IP和客户端机器名称  
    /// </summary>  
    public static string GetClientInfo()
    {
        OperationContext context = OperationContext.Current;
        MessageProperties messageProperties = context.IncomingMessageProperties;
        RemoteEndpointMessageProperty endpointProperty = messageProperties[RemoteEndpointMessageProperty.Name] as RemoteEndpointMessageProperty;
        HttpRequestMessageProperty requestProperty = messageProperties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
        string clientIp = !string.IsNullOrEmpty(requestProperty.Headers["X-Real-IP"]) ? requestProperty.Headers["X-Real-IP"] : endpointProperty.Address;
        string clientName = Environment.MachineName;
        //Console.WriteLine("ClientIp: " + clientIp + "clientName:" + clientName);
        return "ClientIp: " + clientIp + "clientName:" + clientName;
    }
        #endregion 截取非微信访问用户
}